import readline from "readline";
import chalk from "chalk";

export class AuthHandler {
    constructor(rlInstance) {
        this.rl = rlInstance; // Utiliza la instancia de readline proporcionada para la interacci√≥n con el usuario.
        this.question = (text) => new Promise((resolve) => this.rl.question(text, resolve));
    }

    // Muestra un men√∫ al usuario y obtiene la opci√≥n de conexi√≥n (QR o c√≥digo de 8 d√≠gitos).
    async obtenerOpcionConexion() {
        let opcion;
        do {
            // L√≥gica del men√∫ visual (se mantiene la provista por el usuario)
            let lineM = '‚òÖ‚àª‚àπ‚ã∞‚ã∞ ‚òÜ‚àª‚àπ‚ã∞‚ã∞ ‚òÖ‚àª‚àπ‚ã∞‚ã∞ ‚òÜ‚àª‚àπ‚ã∞‚ã∞‚òÖ‚àª‚àπ‚ã∞‚ã∞ ‚òÜ‚àª‚àπ‚ã∞‚ã∞';
            let linen = '‚úÑ ‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà';
            opcion = await this.question(`\n\n${lineM}\n
      ${chalk.blue.bgBlue.bold.cyan('ü™∑  m·•±ÃÅùóç·•Ü·É´·•Ü ·É´·•± ·•é—ñ·•í·•¥·•ô·•£·•≤·•¥—ñ·•Ü·•í ü™∑ ')}\n
${lineM}\n
  ${chalk.blueBright('üéÄ Íí∑Ô∏∂Íí•‚ÄßÀö‡´ÆÍí∞€µ‚Ä¢‚ñ¥‚Ä¢€µÍí±·Éê‚ÄßÀöÍí∑Ô∏∂Íí•üéÄ')}\n
${chalk.blueBright(linen)}\n   
${chalk.green.bgMagenta.bold.yellow('üåü  “ª·•Ü·•£·•≤, “ª·•±rm·•Üs·•ä, ¬ø·•¥·•Üm·•Ü ùóä·•ô—ñ·•±r·•±s ·•¥·•Ü·•í·•±·•¥ùóç·•≤rùóç·•±? üåü ')}\n
${chalk.bold.redBright('üçì  ‚ñ∑ ·•±·•£·•±·•¥·•¥—ñ·•Ü·•í ‚ûä :')} ${chalk.greenBright('·•ôs·•≤ ·•ô·•í ·•¥·•Ü·É´—ñg·•Ü üÜÄ üÜÅ .')}
${chalk.bold.redBright('üß∏  ‚ñ∑ ·•±·•£·•±·•¥·•¥—ñ·•Ü·•í ‚ûã :')} ${chalk.greenBright('·•ôs·•≤ ·•ô·•í ·•¥·•Ü·É´—ñg·•Ü ·É´·•± 8 ·É´—ñg—ñùóç·•Üs.')}\n
${chalk.blueBright(linen)}\n   
${chalk.italic.magenta('üçÑ ¬øùóä·•ô·•±ÃÅ ·•±·•£·•±·•¥·•¥—ñ·•Ü·•í ·•±·•£·•±g—ñsùóç·•±? ‚ç¥·•Ürùñø—ñs ·•±s·•¥r—ñ·ë≤·•±')}
${chalk.italic.magenta('s·•Ü·•£·•Ü ·•±·•£ ·•í·•ôÃÅm·•±r·•Ü ·É´·•± ·•£·•≤ ·•±·•£·•±·•¥·•¥—ñ·•Ü·•í. üçÑ')}\n
${chalk.bold.magentaBright('---> ')}`);

            if (!/^[1-2]$/.test(opcion)) {
                console.log(chalk.bold.cyanBright(`üåª  “ª·•±·•°·•°·•°·•° üåª  Ÿ©(‡πëÍí¶‡∫¥»èÍí¶‡∫¥‡πë)€∂ \n\n${chalk.bold.redBright(`üå∏  ·•í·•Ü s·•± ‚ç¥·•±rm—ñùóç·•±·•í m·•≤ÃÅs ·•í·•ôm·•±r·•Üs·•Üs ·•≤‚ç¥·•≤rùóç·•± ·É´·•± ${chalk.bold.greenBright("‚ûä")} ·•Ü ${chalk.bold.greenBright("‚ûã")} üå∏\nüåº  ùóç·•≤m‚ç¥·•Ü·•¥·•Ü ·•£·•±ùóçr·•≤s ·•í—ñ s—ñm·ë≤·•Ü·•£·•Üs ·•±s‚ç¥·•±·•¥—ñ·•≤·•£·•±s. (‚ï•Ôπè‚ï•) üåº`)}\n\n${chalk.bold.yellowBright("ü™ª  ‚ô° ¬¥ÔΩ•·É¶ ÔΩ•`‚ô° ùóç—ñ‚ç¥ ü™ª : üå∫  ·•¥·•Ü‚ç¥—ñ·•≤ ùóç·•ô ·•í·•ôÃÅm·•±r·•Ü ·É´·•±s·É´·•± ·•£·•≤ ·•≤‚ç¥‚ç¥\n ·É´·•± ·•ï“ª·•≤ùóçs·•≤‚ç¥‚ç¥ ·•° ‚ç¥·•±g·•≤·•£·•Ü ·•±·•í ·•£·•≤ ·•¥·•Ü·•ís·•Ü·•£·•≤. üå∫")}`))
            }
        } while (!/^[1-2]$/.test(opcion));
        return opcion; // Retorna '1' para QR o '2' para c√≥digo de 8 d√≠gitos.
    }

    // Solicita al usuario su n√∫mero de tel√©fono si se elige la conexi√≥n por c√≥digo y no existe sesi√≥n.
    async obtenerNumeroTelefonoParaCodigo(authFileExists) {
        if (authFileExists) {
            console.log(chalk.yellow("Archivo de sesi√≥n existente. Si el c√≥digo de pareo falla, elimina la carpeta 'auth' y reintenta."));
        }

        let addNumber;
        while (true) {
            addNumber = await this.question(chalk.bgBlack(chalk.bold.greenBright(`\n  (‚â°^‚àá^‚â°) Por favor, introduce tu n√∫mero de WhatsApp completo (con c√≥digo de pa√≠s).\n\n${chalk.bold.yellowBright("ü´ê  Por ejemplo („ÄÉ‚àÄ„ÄÉ)„Çûü´ê\n    ‚û• +5211234567890")}\n${chalk.bold.magentaBright('---> ')}`)));
            addNumber = addNumber.replace(/[^0-9+]/g, ''); // Permite '+' para el c√≥digo de pa√≠s.

            if (addNumber.match(/^\+?\d{10,15}$/)) { // Validaci√≥n b√°sica del formato del n√∫mero.
                break;
            } else {
                console.log(chalk.bold.redBright("  Por favor, introduce un n√∫mero de WhatsApp v√°lido con el c√≥digo de pa√≠s. (‚óû ·úä ‚óü„ÜÄ) "));
            }
        }
        // Es responsabilidad de quien llama a AuthHandler cerrar la instancia 'rl' global cuando ya no se necesite en la aplicaci√≥n.
        return addNumber; // Retorna el n√∫mero de tel√©fono proporcionado por el usuario.
    }
}
